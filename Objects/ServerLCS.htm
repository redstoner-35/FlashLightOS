<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ServerLCS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ServerLCS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jul 15 09:19:33 2023
<BR><P>
<H3>Maximum Stack Usage =        680 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ShellProcUtilHandler &rArr; CommandHandler &rArr; HelpHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[55]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[56]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADC_IRQHandler</a> from ht32f5xxxx_01_it.o(i.ADC_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[29]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[34]">CheckAndRestoreConfigFromXmodem</a> from cfgmgmt.o(i.CheckAndRestoreConfigFromXmodem) referenced from cfgmgmt.o(i.cfgmgmthandler)
 <LI><a href="#[f]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from ht32f5xxxx_01_it.o(i.EXTI4_15_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[37]">ExitRunLogCmdHandler</a> from runlogcfg.o(i.ExitRunLogCmdHandler) referenced from runlogcfg.o(i.runlogcfgHandler)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">GPTM0_IRQHandler</a> from ht32f5xxxx_01_it.o(i.GPTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">GPTM1_IRQHandler</a> from ht32f5xxxx_01_it.o(i.GPTM1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3d]">HelpArgument</a> from help.o(i.HelpArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[1c]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[27]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[28]">PDMA_CH2_5_IRQHandler</a> from ht32f5xxxx_01_it.o(i.PDMA_CH2_5_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[35]">RestoreErrorLogFromXmodem</a> from logbkup.o(i.RestoreErrorLogFromXmodem) referenced from logbkup.o(i.logbkupHandler)
 <LI><a href="#[38]">RestoreRunLog</a> from runlogcfg.o(i.RestoreRunLog) referenced from runlogcfg.o(i.runlogcfgHandler)
 <LI><a href="#[24]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2a]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[32]">TinyshellXmodemHandler</a> from tinyshell.o(i.TinyshellXmodemHandler) referenced from tinyshell.o(i.SelfTestErrorHandler)
 <LI><a href="#[22]">UART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">UART1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[54]">__main</a> from __main.o(!!!main) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[31]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[39]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[2d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2f]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[3b]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[3c]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[3a]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[2e]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[2c]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[51]">battcfgArgument</a> from battcfg.o(i.battcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[4e]">breathecfgArgument</a> from breathecfg.o(i.breathecfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[41]">cfgmgmtArgument</a> from cfgmgmt.o(i.cfgmgmtArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[33]">cfgmgmtCmdXmodemErrorHandler</a> from cfgmgmt.o(i.cfgmgmtCmdXmodemErrorHandler) referenced from cfgmgmt.o(i.cfgmgmthandler)
 <LI><a href="#[42]">cfgmgmt_ctrlc_handler</a> from cfgmgmt.o(i.cfgmgmt_ctrlc_handler) referenced from commandhandler.o(.constdata)
 <LI><a href="#[43]">cptxgenArgument</a> from cprtxtgen.o(i.cptxgenArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[52]">customflashcfgArgument</a> from customflashcfg.o(i.customflashcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[46]">imonadjArgument</a> from imonadj.o(i.imonadjArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[30]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[48]">logbkupArgument</a> from logbkup.o(i.logbkupArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[36]">logbkupCmdEndHandler</a> from logbkup.o(i.logbkupCmdEndHandler) referenced from logbkup.o(i.logbkupHandler)
 <LI><a href="#[3e]">login_ctrlC_handler</a> from loginlogout.o(i.login_ctrlC_handler) referenced from commandhandler.o(.constdata)
 <LI><a href="#[47]">logviewArgument</a> from logview.o(i.logviewArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[4a]">modeadvcfgArgument</a> from modeadvcfg.o(i.modeadvcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[4b]">modecurcfgArgument</a> from modecurcfg.o(i.modecurcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[49]">modeenacfgArgument</a> from modeenacfg.o(i.modeenacfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[50]">modeporcfgArgument</a> from modeporcfg.o(i.modeporcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[53]">modeviewArgument</a> from modeview.o(i.modeviewArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[4d]">mostranscfgArgument</a> from mostrancfg.o(i.mostranscfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[45]">reboot_CtrlC_Handler</a> from reboot.o(i.reboot_CtrlC_Handler) referenced from commandhandler.o(.constdata)
 <LI><a href="#[4c]">strobecfgArgument</a> from strobecfg.o(i.strobecfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[44]">termcfgArgument</a> from termcfg.o(i.termcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[4f]">thremalcfgArgument</a> from thermalcfg.o(i.thremalcfgArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[3f]">usrmodArgument</a> from usrmod.o(i.usrmodArgument) referenced from commandhandler.o(.constdata)
 <LI><a href="#[40]">usrmod_ctrlC_handler</a> from usrmod.o(i.usrmod_ctrlC_handler) referenced from commandhandler.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>MIDI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[27]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[5a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[5b]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[5d]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[5f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[54]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[62]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[22d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cb]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[63]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[64]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[66]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[68]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[6a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[6b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[6c]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[6e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[6f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[71]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[72]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[73]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[75]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[77]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[79]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[7a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[7b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[7d]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[7f]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[80]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[82]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[84]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[86]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[230]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[231]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[88]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[232]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[233]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[234]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[235]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[236]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[237]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[238]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[239]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[240]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[241]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[242]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[243]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[244]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[245]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[246]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[247]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[248]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[249]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[24a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[24b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[24c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[24d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[91]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ShellProcUtilHandler &rArr; CommandHandler &rArr; HelpHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[24e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[94]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[24f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[96]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[98]"></a>__c89vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>

<P><STRONG><a name="[9b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
</UL>

<P><STRONG><a name="[16e]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideLED_GenerateModeInfoPattern
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeNoMemoryRollBackHandler
</UL>

<P><STRONG><a name="[1a0]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
</UL>

<P><STRONG><a name="[9e]"></a>strncasecmp</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputIsTrue
</UL>

<P><STRONG><a name="[135]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForThermalSens
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForLightmode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
</UL>

<P><STRONG><a name="[12a]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRunLogAreaOK
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForErrLogStatu
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigurationFromROM
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryWrite
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[251]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_EncryptState
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_DecryptState
</UL>

<P><STRONG><a name="[253]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
</UL>

<P><STRONG><a name="[a6]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[a5]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistoryBuf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideLED_GenerateModeInfoPattern
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeNoMemoryRollBackHandler
</UL>

<P><STRONG><a name="[aa]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitTxModule
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitRXModule
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a9]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogDataSectionInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitLogArea
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushDefaultInfoInsideLog
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
</UL>

<P><STRONG><a name="[136]"></a>strcmp</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, strcmpv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForThermalSens
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForLightmode
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_EncryptState
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_DecryptState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLoginDelayTime
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMAIntCallBack
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutsAuto
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLampTime
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNoActTime
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemDMARXHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeNoMemoryRollBackHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[257]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[25a]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[ab]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[ae]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[af]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[b1]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[b0]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLampTime
</UL>

<P><STRONG><a name="[25b]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[25c]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[25d]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[25e]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempTable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisaplayTelemResult
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
</UL>

<P><STRONG><a name="[25f]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderStateMachine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[b6]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[b5]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderStateMachine
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[260]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
</UL>

<P><STRONG><a name="[261]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
</UL>

<P><STRONG><a name="[262]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
</UL>

<P><STRONG><a name="[263]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[264]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[bb]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[9f]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[be]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bf]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c0]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[70]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[65]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[99]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[9a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[2c]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[78]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[c8]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[74]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[7c]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[c9]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[76]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[7e]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[67]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c4]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ce]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[9d]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[d0]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[21c]"></a>__ARM_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>

<P><STRONG><a name="[d3]"></a>_fcmp4</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fcmp4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[d4]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmp4
</UL>

<P><STRONG><a name="[266]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[267]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[c7]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[30]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[268]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[dd]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[81]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[83]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[df]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[85]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[87]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2e]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c6]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[c2]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d1]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d2]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[221]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[8e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[89]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[dc]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e1]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3a]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[d7]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e6]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d9]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e7]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[93]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e2]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[269]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3b]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[3c]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[26a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[26c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>AD5693R_SetChipConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ad5693r.o(i.AD5693R_SetChipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5693R_SetChipConfig &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[f5]"></a>AD5693R_SetOutput</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ad5693r.o(i.AD5693R_SetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5693R_SetOutput &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
</UL>

<P><STRONG><a name="[fb]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EOC_interrupt_Callback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[1b8]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[f8]"></a>ADC_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f5xxxx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[fa]"></a>ADC_EOC_interrupt_Callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.ADC_EOC_interrupt_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_EOC_interrupt_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>ADC_GetIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>ADC_GetLEDIfPinVoltage</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, adc.o(i.ADC_GetLEDIfPinVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC_GetLEDIfPinVoltage &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
</UL>

<P><STRONG><a name="[105]"></a>ADC_GetResult</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, adc.o(i.ADC_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
</UL>

<P><STRONG><a name="[14]"></a>ADC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler &rArr; ADC_EOC_interrupt_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIntStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EOC_interrupt_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>ADC_IntConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[fe]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
</UL>

<P><STRONG><a name="[fd]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
</UL>

<P><STRONG><a name="[1b6]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[1b5]"></a>ADC_SamplingTimeConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SamplingTimeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[ff]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
</UL>

<P><STRONG><a name="[110]"></a>AES_EncryptDecryptData</STRONG> (Thumb, 218 bytes, Stack size 288 bytes, aes256.o(i.AES_EncryptDecryptData))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ExpRoundKeys
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_EncryptState
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_DecryptState
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigurationFromROM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[200]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, ht32f5xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
</UL>

<P><STRONG><a name="[162]"></a>AFIO_GPxConfig</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[114]"></a>ActiveConfigurationCRC</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cfgfileop.o(i.ActiveConfigurationCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ActiveConfigurationCRC &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
</UL>

<P><STRONG><a name="[117]"></a>ArrowKeyHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, commandhandler.o(i.ArrowKeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ArrowKeyHandler &rArr; CommandHistoryUpward &rArr; UARTPutc &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[11a]"></a>BreatheStateMachine</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, breathmode.o(i.BreatheStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BreatheStateMachine &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerCallbackRoutine
</UL>

<P><STRONG><a name="[205]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_GetPeripFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[115]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHBTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLogEntryCRC32
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForErrLogStatu
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveConfigurationCRC
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[1b4]"></a>CKCU_SetADCnPrescaler</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ht32f5xxxx_ckcu.o(i.CKCU_SetADCnPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CKCU_SetADCnPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>

<P><STRONG><a name="[116]"></a>CRC_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_crc.o(i.CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLogEntryCRC32
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForErrLogStatu
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveConfigurationCRC
</UL>

<P><STRONG><a name="[11f]"></a>CalcLastLogCRCBeforePO</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, runtimelogger.o(i.CalcLastLogCRCBeforePO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalcLastLogCRCBeforePO &rArr; CalcRunLogCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverLockPOR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
</UL>

<P><STRONG><a name="[120]"></a>CalcRunLogCRC32</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, runtimelogger.o(i.CalcRunLogCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalcRunLogCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverLockPOR
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLastLogCRCBeforePO
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
</UL>

<P><STRONG><a name="[34]"></a>CheckAndRestoreConfigFromXmodem</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cfgmgmt.o(i.CheckAndRestoreConfigFromXmodem))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = CheckAndRestoreConfigFromXmodem &rArr; CheckConfigurationInROM &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigurationFromROM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgmgmt.o(i.cfgmgmthandler)
</UL>
<P><STRONG><a name="[122]"></a>CheckConfigurationInROM</STRONG> (Thumb, 268 bytes, Stack size 88 bytes, cfgfileop.o(i.CheckConfigurationInROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = CheckConfigurationInROM &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
</UL>

<P><STRONG><a name="[218]"></a>CheckForCustomFlashStr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, customflash.o(i.CheckForCustomFlashStr))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
</UL>

<P><STRONG><a name="[129]"></a>CheckForErrLogStatu</STRONG> (Thumb, 180 bytes, Stack size 240 bytes, logger.o(i.CheckForErrLogStatu))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CheckForErrLogStatu &rArr; M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
</UL>

<P><STRONG><a name="[12b]"></a>CheckForStringCanBeSentViaMorse</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, morsecodetransmitmode.o(i.CheckForStringCanBeSentViaMorse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckForStringCanBeSentViaMorse
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMorseSequenceFromASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
</UL>

<P><STRONG><a name="[12d]"></a>CheckHBTimerIsEnabled</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mcubeattimer.o(i.CheckHBTimerIsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CheckHBTimerIsEnabled &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>CheckIfParamOnlyDigit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, parameterprocessor.o(i.CheckIfParamOnlyDigit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
</UL>

<P><STRONG><a name="[130]"></a>CheckLinearTable</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, lineartabop.o(i.CheckLinearTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CheckLinearTable &rArr; __aeabi_cfrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
</UL>

<P><STRONG><a name="[134]"></a>CheckUserInputForLightmode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, parameterprocessor.o(i.CheckUserInputForLightmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckUserInputForLightmode &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
</UL>

<P><STRONG><a name="[137]"></a>CheckUserInputForModeGroup</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, parameterprocessor.o(i.CheckUserInputForModeGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckUserInputForModeGroup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
</UL>

<P><STRONG><a name="[138]"></a>CheckUserInputForThermalSens</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, parameterprocessor.o(i.CheckUserInputForThermalSens))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckUserInputForThermalSens &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
</UL>

<P><STRONG><a name="[139]"></a>CheckUserInputIsTrue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, parameterprocessor.o(i.CheckUserInputIsTrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckUserInputIsTrue &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
</UL>

<P><STRONG><a name="[207]"></a>Checksum8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xmodemdigestencrypt.o(i.Checksum8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Checksum8
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[127]"></a>ClearRecvBuffer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, commandprocutil.o(i.ClearRecvBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAFullHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlCHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_CtrlC_Handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboothandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmtCmdXmodemErrorHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConfError
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupCmdEndHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitRunLogCmdHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logclrHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[13a]"></a>CmdExecuteHandler</STRONG> (Thumb, 430 bytes, Stack size 128 bytes, commandhandler.o(i.CmdExecuteHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = CmdExecuteHandler &rArr; PasswordVerifyHandler &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Argv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryWrite
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[13f]"></a>CollectLoginfo</STRONG> (Thumb, 356 bytes, Stack size 136 bytes, logger.o(i.CollectLoginfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_SetConvMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLogEntryCRC32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeErrorReportHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeNoMemoryRollBackHandler
</UL>

<P><STRONG><a name="[143]"></a>CommandHandler</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, handlerentry.o(i.CommandHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = CommandHandler &rArr; HelpHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboothandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogoutHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logclrHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[119]"></a>CommandHistoryDownward</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, commandhistory.o(i.CommandHistoryDownward))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CommandHistoryDownward &rArr; UARTPutc &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrlen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrowKeyHandler
</UL>

<P><STRONG><a name="[118]"></a>CommandHistoryUpward</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, commandhistory.o(i.CommandHistoryUpward))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CommandHistoryUpward &rArr; UARTPutc &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrlen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrowKeyHandler
</UL>

<P><STRONG><a name="[13d]"></a>CommandHistoryWrite</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, commandhistory.o(i.CommandHistoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CommandHistoryWrite &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
</UL>

<P><STRONG><a name="[161]"></a>ConsoleInit</STRONG> (Thumb, 306 bytes, Stack size 104 bytes, usartrxsupport.o(i.ConsoleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ConsoleInit &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnaCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXRXTLConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PDMACmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistoryBuf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMATxInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>ConsoleReconfigure</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usartrxsupport.o(i.ConsoleReconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ConsoleReconfigure &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>CopyRightTextGenerator</STRONG> (Thumb, 410 bytes, Stack size 80 bytes, cprtxtgen.o(i.CopyRightTextGenerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = CopyRightTextGenerator &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[16f]"></a>CtrlCHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, commandhandler.o(i.CtrlCHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CtrlCHandler &rArr; PrintShellIcon &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[170]"></a>CustomFlashHandler</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, customflash.o(i.CustomFlashHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CustomFlashHandler &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerCallbackRoutine
</UL>

<P><STRONG><a name="[171]"></a>DMAFullHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, commandhandler.o(i.DMAFullHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMAFullHandler &rArr; PrintShellIcon &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[169]"></a>DMATxInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usarttxsupport.o(i.DMATxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMATxInit &rArr; PDMA_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[1e0]"></a>DeepSleepTimerCallBack</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, deepsleep.o(i.DeepSleepTimerCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[173]"></a>DisableFlashTimer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, specialmodetimer.o(i.DisableFlashTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableFlashTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
</UL>

<P><STRONG><a name="[176]"></a>DisableHBTimer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mcubeattimer.o(i.DisableHBTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisableHBTimer &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
</UL>

<P><STRONG><a name="[179]"></a>DisplayCorrectMode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, parameterprocessor.o(i.DisplayCorrectMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = DisplayCorrectMode &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
</UL>

<P><STRONG><a name="[17a]"></a>DisplayCorrectModeGroup</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, parameterprocessor.o(i.DisplayCorrectModeGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = DisplayCorrectModeGroup &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
</UL>

<P><STRONG><a name="[17b]"></a>DisplayCorrectSensor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, parameterprocessor.o(i.DisplayCorrectSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = DisplayCorrectSensor &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
</UL>

<P><STRONG><a name="[17c]"></a>DisplayIllegalParam</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, parameterprocessor.o(i.DisplayIllegalParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamToConstPtr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
</UL>

<P><STRONG><a name="[17e]"></a>DisplayLampTime</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, runlogview.o(i.DisplayLampTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = DisplayLampTime &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
</UL>

<P><STRONG><a name="[181]"></a>DisplayLoginDelayTime</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, loginlogout.o(i.DisplayLoginDelayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = DisplayLoginDelayTime &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginHandler
</UL>

<P><STRONG><a name="[182]"></a>DisplayNoActTime</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, useridletimer.o(i.DisplayNoActTime), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[184]"></a>DisplayWhichModeSelected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, parameterprocessor.o(i.DisplayWhichModeSelected))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DisplayWhichModeSelected &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
</UL>

<P><STRONG><a name="[185]"></a>DisplayXmodemBackUp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xmodeminfo.o(i.DisplayXmodemBackUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DisplayXmodemBackUp &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
</UL>

<P><STRONG><a name="[186]"></a>DriverLockPOR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, onoffswitchlogic.o(i.DriverLockPOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = DriverLockPOR &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLastLogCRCBeforePO
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EXTI4_15_IRQHandler &rArr; SideKey_Callback &rArr; ExitLowPowerMode &rArr; AD5693R_SetChipConfig &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeFlag
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>EXTI_GetEdgeFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_GetEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>EXTI_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
</UL>

<P><STRONG><a name="[202]"></a>EXTI_IntConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
</UL>

<P><STRONG><a name="[18b]"></a>EnableHBTimer</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mcubeattimer.o(i.EnableHBTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EnableHBTimer &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[18e]"></a>EnteredLowPowerMode</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, deepsleep.o(i.EnteredLowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EnteredLowPowerMode &rArr; AD5693R_SetChipConfig &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHBTimer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetChipConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[191]"></a>ExitLowPowerMode</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, deepsleep.o(i.ExitLowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ExitLowPowerMode &rArr; AD5693R_SetChipConfig &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetChipConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Callback
</UL>

<P><STRONG><a name="[37]"></a>ExitRunLogCmdHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, runlogcfg.o(i.ExitRunLogCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExitRunLogCmdHandler &rArr; XmodemTransferReset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runlogcfg.o(i.runlogcfgHandler)
</UL>
<P><STRONG><a name="[194]"></a>FetchLoggerData</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, logger.o(i.FetchLoggerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FetchLoggerData &rArr; M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
</UL>

<P><STRONG><a name="[195]"></a>FlashTimerCallbackRoutine</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, specialmodetimer.o(i.FlashTimerCallbackRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FlashTimerCallbackRoutine &rArr; RampModeHandler &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderStateMachine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>FlashTimerInitHandler</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, specialmodetimer.o(i.FlashTimerInitHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FlashTimerInitHandler &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[199]"></a>ForceWriteRuntimelog</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, runtimelogger.o(i.ForceWriteRuntimelog))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ForceWriteRuntimelog &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[1a5]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDMgmt_CallBack
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAUXPWR
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reset
</UL>

<P><STRONG><a name="[190]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[1a4]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[163]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PullResistorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[1a6]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Callback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[1a3]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDMgmt_CallBack
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAUXPWR
</UL>

<P><STRONG><a name="[17]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ht32f5xxxx_01_it.o(i.GPTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPTM0_IRQHandler &rArr; LEDMgmt_CallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_TIM_Callback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetFlagStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_TIM_Callback
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDMgmt_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ht32f5xxxx_01_it.o(i.GPTM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GPTM1_IRQHandler &rArr; FlashTimerCallbackRoutine &rArr; RampModeHandler &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetFlagStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerCallbackRoutine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[217]"></a>GenerateSeqCodeForAES</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, xmodemdigestencrypt.o(i.GenerateSeqCodeForAES))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GenerateSeqCodeForAES
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ExpRoundKeys
</UL>

<P><STRONG><a name="[11b]"></a>GetCurrentModeConfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, modeswitchlogic.o(i.GetCurrentModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowVoltageIndicate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderStateMachine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[1cb]"></a>GetSelectedModeConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, modeswitchlogic.o(i.GetSelectedModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>HelpArgument</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, help.o(i.HelpArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>HelpHandler</STRONG> (Thumb, 438 bytes, Stack size 240 bytes, help.o(i.HelpHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = HelpHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutsAuto
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamToConstPtr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCmdExecutable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[1a2]"></a>IIC_Read_Byte</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, i2cdrv.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
</UL>

<P><STRONG><a name="[1a7]"></a>IIC_Send_Byte</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, i2cdrv.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_Erase
</UL>

<P><STRONG><a name="[1a8]"></a>IIC_Start</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2cdrv.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_Erase
</UL>

<P><STRONG><a name="[1a9]"></a>IIC_Stop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2cdrv.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_Erase
</UL>

<P><STRONG><a name="[1aa]"></a>IIC_Wait_Ack</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, i2cdrv.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_Erase
</UL>

<P><STRONG><a name="[1ab]"></a>INA219_GetBusInformation</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ina219.o(i.INA219_GetBusInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = INA219_GetBusInformation &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
</UL>

<P><STRONG><a name="[1ad]"></a>INA219_INIT</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, ina219.o(i.INA219_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = INA219_INIT &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
</UL>

<P><STRONG><a name="[1ae]"></a>INA219_POR</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, ina219.o(i.INA219_POR))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = INA219_POR &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>INA219_SetConvMode</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ina219.o(i.INA219_SetConvMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = INA219_SetConvMode &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_WordReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
</UL>

<P><STRONG><a name="[19d]"></a>IdleTimerCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, useridletimer.o(i.IdleTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>IdleTimerHandler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, useridletimer.o(i.IdleTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = IdleTimerHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[14e]"></a>Imonadjhandler</STRONG> (Thumb, 590 bytes, Stack size 80 bytes, imonadj.o(i.Imonadjhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Imonadjhandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[16b]"></a>InitHistoryBuf</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, commandhistory.o(i.InitHistoryBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitHistoryBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[1fb]"></a>InputDataBlackList</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usartrxsupport.o(i.InputDataBlackList))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
</UL>

<P><STRONG><a name="[1b3]"></a>InternalADC_Init</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, adc.o(i.InternalADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = InternalADC_Init &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCnPrescaler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SamplingTimeConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>InternalADC_QuickInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adc.o(i.InternalADC_QuickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InternalADC_QuickInit &rArr; ADC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCnPrescaler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SamplingTimeConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[19f]"></a>IsCmdExecutable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, commandprocutil.o(i.IsCmdExecutable))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
</UL>

<P><STRONG><a name="[16d]"></a>IsParameterExist</STRONG> (Thumb, 420 bytes, Stack size 144 bytes, commandprocutil.o(i.IsParameterExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IsParameterExist &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
</UL>

<P><STRONG><a name="[1b9]"></a>IsRunLogAreaOK</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, runtimelogger.o(i.IsRunLogAreaOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IsRunLogAreaOK &rArr; M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
</UL>

<P><STRONG><a name="[19b]"></a>LEDMgmt_CallBack</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, ledmgmt.o(i.LEDMgmt_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEDMgmt_CallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>LEDShortCounter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lineardim.o(i.LEDShortCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = LEDShortCounter &rArr; RunTimeErrorReportHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeErrorReportHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>LED_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ledmgmt.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = LED_Init &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>LED_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ledmgmt.o(i.LED_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideLED_GenerateModeInfoPattern
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeNoMemoryRollBackHandler
</UL>

<P><STRONG><a name="[1bd]"></a>LinearDIM_POR</STRONG> (Thumb, 588 bytes, Stack size 72 bytes, lineardim.o(i.LinearDIM_POR))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = LinearDIM_POR &rArr; OnChipADC_FaultHandler &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetChipConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAUXPWR
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipADC_FaultHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>LoadDefaultConf</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, cfgfileop.o(i.LoadDefaultConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoadDefaultConf &rArr; RestoreFactoryModeCfg &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
</UL>

<P><STRONG><a name="[1c4]"></a>LogDataSectionInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, runtimelogger.o(i.LogDataSectionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LogDataSectionInit &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
</UL>

<P><STRONG><a name="[1c5]"></a>LoggerHeader_AutoUpdateHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, logger.o(i.LoggerHeader_AutoUpdateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LoggerHeader_AutoUpdateHandler &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>LoggerHeader_POR</STRONG> (Thumb, 608 bytes, Stack size 136 bytes, logger.o(i.LoggerHeader_POR))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = LoggerHeader_POR &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitLogArea
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>LoginHandler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, loginlogout.o(i.LoginHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = LoginHandler &rArr; DisplayLoginDelayTime &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLoginDelayTime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[145]"></a>LogoutHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loginlogout.o(i.LogoutHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LogoutHandler &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[1c8]"></a>LoopbackAndDelHandler</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, commandhandler.o(i.LoopbackAndDelHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoopbackAndDelHandler &rArr; UARTPutd &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[1ca]"></a>LowVoltageIndicate</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, battmonitor.o(i.LowVoltageIndicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LowVoltageIndicate
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>M24C512_Erase</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, 24cxx.o(i.M24C512_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M24C512_Erase &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
</UL>

<P><STRONG><a name="[128]"></a>M24C512_PageRead</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, 24cxx.o(i.M24C512_PageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRunLogAreaOK
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchloggerheader
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchLoggerData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForErrLogStatu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigurationFromROM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
</UL>

<P><STRONG><a name="[142]"></a>M24C512_PageWrite</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, 24cxx.o(i.M24C512_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_AutoUpdateHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitLogArea
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[1e6]"></a>MCTM_CHBRKCTRConfig</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ht32f5xxxx_mctm.o(i.MCTM_CHBRKCTRConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCTM_CHBRKCTRConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
</UL>

<P><STRONG><a name="[1e7]"></a>MCTM_CHMOECmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_mctm.o(i.MCTM_CHMOECmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
</UL>

<P><STRONG><a name="[154]"></a>ModeEnacfghandler</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, modeenacfg.o(i.ModeEnacfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ModeEnacfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputIsTrue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[1cc]"></a>ModeNoMemoryRollBackHandler</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, modeswitchlogic.o(i.ModeNoMemoryRollBackHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ModeNoMemoryRollBackHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reset
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[1cd]"></a>ModeSwitchInit</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, modeswitchlogic.o(i.ModeSwitchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ModeSwitchInit &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreFactoryModeCfg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>ModeSwitchLogicHandler</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, modeswitchlogic.o(i.ModeSwitchLogicHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ModeSwitchLogicHandler &rArr; SideLED_GenerateModeInfoPattern &rArr; LED_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSideKeyShortPressCount
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRampMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCustomFlashControl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetBreathStateMachine
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderReset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideLED_GenerateModeInfoPattern
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredTripleClick
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>MorseSenderReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, morsecodetransmitmode.o(i.MorseSenderReset))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[197]"></a>MorseSenderStateMachine</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, morsecodetransmitmode.o(i.MorseSenderStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MorseSenderStateMachine &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMorseSequenceFromASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerCallbackRoutine
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>OnChipADC_FaultHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(i.OnChipADC_FaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = OnChipADC_FaultHandler &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
</UL>

<P><STRONG><a name="[28]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.PDMA_CH2_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PDMA_CH2_5_IRQHandler &rArr; TXDMAIntCallBack &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMAIntCallBack
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetFlagStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d8]"></a>PDMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ht32f5xxxx_pdma.o(i.PDMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PDMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_CH2_5_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>PDMA_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMAIntCallBack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
</UL>

<P><STRONG><a name="[168]"></a>PDMA_EnaCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMAIntCallBack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
</UL>

<P><STRONG><a name="[1d7]"></a>PDMA_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_CH2_5_IRQHandler
</UL>

<P><STRONG><a name="[1ee]"></a>PDMA_GetRemainBlkCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_GetRemainBlkCnt))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMAIntCallBack
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemDMARXHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>

<P><STRONG><a name="[172]"></a>PDMA_IntConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32f5xxxx_pdma.o(i.PDMA_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMATxInit
</UL>

<P><STRONG><a name="[203]"></a>PDMA_TranSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_pdma.o(i.PDMA_TranSizeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMAIntCallBack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
</UL>

<P><STRONG><a name="[209]"></a>PEC16CheckXModem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xmodemdigestencrypt.o(i.PEC16CheckXModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PEC16CheckXModem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[1ac]"></a>PMBUS_2NPowCalc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_2NPowCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
</UL>

<P><STRONG><a name="[f4]"></a>PMBUS_WordReadWrite</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, pmbus.o(i.PMBUS_WordReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetChipConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_SetConvMode
</UL>

<P><STRONG><a name="[1da]"></a>PORConfHandler</STRONG> (Thumb, 606 bytes, Stack size 56 bytes, cfgfileop.o(i.PORConfHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = PORConfHandler &rArr; CheckConfigurationInROM &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>PStateInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, onoffswitchlogic.o(i.PStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PStateInit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRampMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCustomFlashControl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetBreathStateMachine
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderReset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>PStateStateMachine</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, onoffswitchlogic.o(i.PStateStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PStateStateMachine &rArr; RuntimeModeCurrentHandler &rArr; RunTimeErrorReportHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceWriteRuntimelog
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLastLogCRCBeforePO
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleepTimerCallBack
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSideKeyShortPressCount
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSideKeyLongPressEvent
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSideKeyHoldEvent
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRampMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCustomFlashControl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetBreathStateMachine
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderReset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeNoMemoryRollBackHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e4]"></a>PWMTimerInit</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, pwmdim.o(i.PWMTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = PWMTimerInit &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_CHMOECmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_CHBRKCTRConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OutputInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>ParamToConstPtr</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, commandprocutil.o(i.ParamToConstPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ParamToConstPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
</UL>

<P><STRONG><a name="[13c]"></a>PasswordVerifyHandler</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, commandhandler.o(i.PasswordVerifyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PasswordVerifyHandler &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>PrintShellIcon</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, commandprocutil.o(i.PrintShellIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PrintShellIcon &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleReconfigure
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAFullHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlCHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerHandler
</UL>

<P><STRONG><a name="[1e8]"></a>PrintStatuBar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, runlogview.o(i.PrintStatuBar), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>

<P><STRONG><a name="[1e9]"></a>PushDefaultInfoInsideLog</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, logger.o(i.PushDefaultInfoInsideLog), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[10d]"></a>QueueLinearTable</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, lineartabop.o(i.QueueLinearTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QueueLinearTable &rArr; CheckLinearTable &rArr; __aeabi_cfrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLinearTable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
</UL>

<P><STRONG><a name="[f9]"></a>RSTCU_PeripReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ht32f5xxxx_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[1ea]"></a>RXDMACallback</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, usartrxsupport.o(i.RXDMACallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = RXDMACallback &rArr; XmodemTxStateMachine &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetRemainBlkCnt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemDMARXHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[196]"></a>RampModeHandler</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, rampmode.o(i.RampModeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RampModeHandler &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSideKeyClickAndHoldEvent
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerCallbackRoutine
</UL>

<P><STRONG><a name="[1c7]"></a>ReInitLogArea</STRONG> (Thumb, 166 bytes, Stack size 112 bytes, logger.o(i.ReInitLogArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ReInitLogArea &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLogEntryCRC32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logclrHandler
</UL>

<P><STRONG><a name="[124]"></a>ReadConfigurationFromROM</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, cfgfileop.o(i.ReadConfigurationFromROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ReadConfigurationFromROM &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
</UL>

<P><STRONG><a name="[14d]"></a>Reboothandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, reboot.o(i.Reboothandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reboothandler &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[1d1]"></a>ResetBreathStateMachine</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, breathmode.o(i.ResetBreathStateMachine))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[1d4]"></a>ResetCustomFlashControl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, customflash.o(i.ResetCustomFlashControl))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[21d]"></a>ResetLoggerHeader_AutoUpdateTIM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, logger.o(i.ResetLoggerHeader_AutoUpdateTIM))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logclrHandler
</UL>

<P><STRONG><a name="[1d3]"></a>ResetRampMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rampmode.o(i.ResetRampMode))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[1f0]"></a>ResetRunTimeLogArea</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, runtimelogger.o(i.ResetRunTimeLogArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ResetRunTimeLogArea &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogDataSectionInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
</UL>

<P><STRONG><a name="[35]"></a>RestoreErrorLogFromXmodem</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, logbkup.o(i.RestoreErrorLogFromXmodem))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = RestoreErrorLogFromXmodem &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchloggerheader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForErrLogStatu
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logbkup.o(i.logbkupHandler)
</UL>
<P><STRONG><a name="[1c3]"></a>RestoreFactoryModeCfg</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, modeswitchlogic.o(i.RestoreFactoryModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RestoreFactoryModeCfg &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConf
</UL>

<P><STRONG><a name="[38]"></a>RestoreRunLog</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, runlogcfg.o(i.RestoreRunLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = RestoreRunLog &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRunLogAreaOK
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> runlogcfg.o(i.runlogcfgHandler)
</UL>
<P><STRONG><a name="[1f2]"></a>RunLogModule_POR</STRONG> (Thumb, 510 bytes, Stack size 192 bytes, runtimelogger.o(i.RunLogModule_POR))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = RunLogModule_POR &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>RunTimeBatteryTelemetry</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, battmonitor.o(i.RunTimeBatteryTelemetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RunTimeBatteryTelemetry &rArr; RunTimeErrorReportHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeErrorReportHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>RunTimeDataLogging</STRONG> (Thumb, 624 bytes, Stack size 80 bytes, runtimelogger.o(i.RunTimeDataLogging))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = RunTimeDataLogging &rArr; RunTimeErrorReportHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeErrorReportHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>RunTimeErrorReportHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, onoffswitchlogic.o(i.RunTimeErrorReportHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RunTimeErrorReportHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShortCounter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
</UL>

<P><STRONG><a name="[1e3]"></a>RuntimeModeCurrentHandler</STRONG> (Thumb, 908 bytes, Stack size 72 bytes, lineardim.o(i.RuntimeModeCurrentHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = RuntimeModeCurrentHandler &rArr; RunTimeErrorReportHandler &rArr; CollectLoginfo &rArr; ADC_GetResult &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeErrorReportHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentModeConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[1f9]"></a>SMBUS_Init</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, i2cdrv.o(i.SMBUS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = SMBUS_Init &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[21b]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[219]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[12f]"></a>SelfTestErrorHandler</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, tinyshell.o(i.SelfTestErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SelfTestErrorHandler &rArr; XmodemTxDisplayHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Second
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetRemainBlkCnt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitTxModule
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDataBlackList
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHBTimerIsEnabled
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipADC_FaultHandler
</UL>

<P><STRONG><a name="[1be]"></a>SetAUXPWR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, onoffswitchlogic.o(i.SetAUXPWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetAUXPWR
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
</UL>

<P><STRONG><a name="[1bf]"></a>SetPWMDuty</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pwmdim.o(i.SetPWMDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetPWMDuty &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_CHMOECmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOFFLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
</UL>

<P><STRONG><a name="[1fd]"></a>ShellProcUtilHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, handlerentry.o(i.ShellProcUtilHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ShellProcUtilHandler &rArr; CommandHandler &rArr; HelpHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopbackAndDelHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAFullHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlCHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrowKeyHandler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>SideKeyInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sidekey.o(i.SideKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SideKeyInit &rArr; UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>SideKey_Callback</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sidekey.o(i.SideKey_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SideKey_Callback &rArr; ExitLowPowerMode &rArr; AD5693R_SetChipConfig &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>SideKey_LogicHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sidekey.o(i.SideKey_LogicHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SideKey_LogicHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>SideKey_TIM_Callback</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sidekey.o(i.SideKey_TIM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>SideLED_GenerateModeInfoPattern</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, modeswitchlogic.o(i.SideLED_GenerateModeInfoPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SideLED_GenerateModeInfoPattern &rArr; LED_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[13e]"></a>Str2Argv</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, commandprocutil.o(i.Str2Argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Str2Argv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SystemInit</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>TM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHBTimer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableFlashTimer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[174]"></a>TM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHBTimer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableFlashTimer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[19a]"></a>TM_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>TM_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[1e5]"></a>TM_OutputInit</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, ht32f5xxxx_tm.o(i.TM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
</UL>

<P><STRONG><a name="[18c]"></a>TM_TimeBaseInit</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimerInitHandler
</UL>

<P><STRONG><a name="[1d9]"></a>TXDMAIntCallBack</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, usarttxsupport.o(i.TXDMAIntCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TXDMAIntCallBack &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_TranSizeConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetRemainBlkCnt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnaCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_CH2_5_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>TXDMA_StartFirstTransfer</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usarttxsupport.o(i.TXDMA_StartFirstTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_TranSizeConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnaCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutsAuto
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>

<P><STRONG><a name="[1fe]"></a>TabHandler</STRONG> (Thumb, 1240 bytes, Stack size 312 bytes, commandhandler.o(i.TabHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TabHandler &rArr; UARTPutc &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Argv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamToConstPtr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCmdExecutable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
</UL>

<P><STRONG><a name="[32]"></a>TinyshellXmodemHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tinyshell.o(i.TinyshellXmodemHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TinyshellXmodemHandler &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tinyshell.o(i.SelfTestErrorHandler)
</UL>
<P><STRONG><a name="[1e2]"></a>TurnLightOFFLogic</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lineardim.o(i.TurnLightOFFLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TurnLightOFFLogic &rArr; INA219_SetConvMode &rArr; PMBUS_WordReadWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_SetConvMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAUXPWR
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableFlashTimer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeErrorReportHandler
</UL>

<P><STRONG><a name="[1e1]"></a>TurnLightONLogic</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, lineardim.o(i.TurnLightONLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TurnLightONLogic &rArr; INA219_GetBusInformation &rArr; PMBUS_2NPowCalc &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5693R_SetOutput
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_SetConvMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAUXPWR
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[160]"></a>UARTPutc</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usarttxsupport.o(i.UARTPutc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UARTPutc &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopbackAndDelHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempTable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStatuBar
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[1c9]"></a>UARTPutd</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, usarttxsupport.o(i.UARTPutd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UARTPutd &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopbackAndDelHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
</UL>

<P><STRONG><a name="[123]"></a>UARTPuts</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usarttxsupport.o(i.UARTPuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPost
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleReconfigure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintShellIcon
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TabHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordVerifyHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlCHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExecuteHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboothandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogoutHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConfError
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempTable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStatuBar
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisaplayTelemResult
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyshellXmodemHandler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectSensor
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectMode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logclrHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerHandler
</UL>

<P><STRONG><a name="[1a1]"></a>UARTPutsAuto</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, usarttxsupport.o(i.UARTPutsAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTPutsAuto &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
</UL>

<P><STRONG><a name="[164]"></a>USART_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleReconfigure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[165]"></a>USART_PDMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_PDMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[166]"></a>USART_TXRXTLConfig</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ht32f5xxxx_usart.o(i.USART_TXRXTLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_TXRXTLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
</UL>

<P><STRONG><a name="[16a]"></a>USART_TxRxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[12e]"></a>UartPost</STRONG> (Thumb, 346 bytes, Stack size 336 bytes, selftestlogger.o(i.UartPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = UartPost &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverLockPOR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHBTimerIsEnabled
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnChipADC_FaultHandler
</UL>

<P><STRONG><a name="[1b1]"></a>UartPrintCommandNoParam</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, parameterprocessor.o(i.UartPrintCommandNoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPrintCommandNoParam &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
</UL>

<P><STRONG><a name="[121]"></a>UartPrintf</STRONG> (Thumb, 222 bytes, Stack size 304 bytes, usarttxsupport.o(i.UartPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXDMA_StartFirstTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleReconfigure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;termcfgHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrmodhandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLoginDelayTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXmodemBackUp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempTable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStatuBar
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLampTime
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisaplayTelemResult
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectSensor
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectMode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeviewhandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeporcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeEnacfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRightTextGenerator
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTimerHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNoActTime
</UL>

<P><STRONG><a name="[1ce]"></a>WriteConfigurationToROM</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, cfgfileop.o(i.WriteConfigurationToROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = WriteConfigurationToROM &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
</UL>

<P><STRONG><a name="[187]"></a>WriteRuntimeLogToROM</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, runtimelogger.o(i.WriteRuntimeLogToROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteRuntimeLogToROM &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverLockPOR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
</UL>

<P><STRONG><a name="[1eb]"></a>XmodemDMARXHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, xmodemrx.o(i.XmodemDMARXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XmodemDMARXHandler &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetRemainBlkCnt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>

<P><STRONG><a name="[208]"></a>XmodemInitRXModule</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xmodemrx.o(i.XmodemInitRXModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XmodemInitRXModule
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
</UL>

<P><STRONG><a name="[1fc]"></a>XmodemInitTxModule</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, xmodemtx.o(i.XmodemInitTxModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XmodemInitTxModule
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
</UL>

<P><STRONG><a name="[1ed]"></a>XmodemRXStateMachine</STRONG> (Thumb, 614 bytes, Stack size 32 bytes, xmodemrx.o(i.XmodemRXStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = XmodemRXStateMachine &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEC16CheckXModem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>

<P><STRONG><a name="[20a]"></a>XmodemRxDisplayHandler</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, xmodeminfo.o(i.XmodemRxDisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = XmodemRxDisplayHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
</UL>

<P><STRONG><a name="[126]"></a>XmodemTransferReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, xmodemrx.o(i.XmodemTransferReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XmodemTransferReset
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmtCmdXmodemErrorHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAndRestoreConfigFromXmodem
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupCmdEndHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreRunLog
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitRunLogCmdHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyshellXmodemHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
</UL>

<P><STRONG><a name="[1fa]"></a>XmodemTxDisplayHandler</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, xmodeminfo.o(i.XmodemTxDisplayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = XmodemTxDisplayHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logbkupHandler
</UL>

<P><STRONG><a name="[1ec]"></a>XmodemTxStateMachine</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, xmodemtx.o(i.XmodemTxStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = XmodemTxStateMachine &rArr; AES_EncryptDecryptData &rArr; aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum8
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEC16CheckXModem
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>

<P><STRONG><a name="[ed]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[db]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[20b]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[20c]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[20d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[20e]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[20f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[210]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[211]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[ea]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[212]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[f2]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[ca]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[216]"></a>aes_AddRoundKey</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, aes256.o(i.aes_AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_EncryptState
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_DecryptState
</UL>

<P><STRONG><a name="[113]"></a>aes_DecryptState</STRONG> (Thumb, 764 bytes, Stack size 56 bytes, aes256.o(i.aes_DecryptState))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_DecryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_AddRoundKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
</UL>

<P><STRONG><a name="[112]"></a>aes_EncryptState</STRONG> (Thumb, 566 bytes, Stack size 56 bytes, aes256.o(i.aes_EncryptState))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_EncryptState &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_AddRoundKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
</UL>

<P><STRONG><a name="[111]"></a>aes_ExpRoundKeys</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, aes256.o(i.aes_ExpRoundKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aes_ExpRoundKeys &rArr; GenerateSeqCodeForAES
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeqCodeForAES
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
</UL>

<P><STRONG><a name="[1b2]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobecfghandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mostranscfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customflashcfgHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathecfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imonadjhandler
</UL>

<P><STRONG><a name="[51]"></a>battcfgArgument</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, battcfg.o(i.battcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>battcfghandler</STRONG> (Thumb, 1794 bytes, Stack size 32 bytes, battcfg.o(i.battcfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = battcfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRuntimeLogToROM
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLastLogCRCBeforePO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[4e]"></a>breathecfgArgument</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, breathecfg.o(i.breathecfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>breathecfghandler</STRONG> (Thumb, 690 bytes, Stack size 56 bytes, breathecfg.o(i.breathecfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = breathecfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[141]"></a>calculateLogEntryCRC32</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, logger.o(i.calculateLogEntryCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = calculateLogEntryCRC32 &rArr; CRC_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitLogArea
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
</UL>

<P><STRONG><a name="[41]"></a>cfgmgmtArgument</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cfgmgmt.o(i.cfgmgmtArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>cfgmgmtCmdXmodemErrorHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cfgmgmt.o(i.cfgmgmtCmdXmodemErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cfgmgmtCmdXmodemErrorHandler &rArr; XmodemTransferReset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgmgmt.o(i.cfgmgmthandler)
</UL>
<P><STRONG><a name="[42]"></a>cfgmgmt_ctrlc_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cfgmgmt.o(i.cfgmgmt_ctrlc_handler))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>cfgmgmthandler</STRONG> (Thumb, 2212 bytes, Stack size 32 bytes, cfgmgmt.o(i.cfgmgmthandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = cfgmgmthandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigurationToROM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigurationFromROM
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultConf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigurationInROM
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActiveConfigurationCRC
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitTxModule
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitRXModule
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXmodemBackUp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConfError
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[148]"></a>clearHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clear.o(i.clearHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clearHandler &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[43]"></a>cptxgenArgument</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cprtxtgen.o(i.cptxgenArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>customflashcfgArgument</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, customflashcfg.o(i.customflashcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>customflashcfgHandler</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, customflashcfg.o(i.customflashcfgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = customflashcfgHandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForCustomFlashStr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[1db]"></a>delay_Second</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, delay.o(i.delay_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_Second
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTestErrorHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
</UL>

<P><STRONG><a name="[192]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPowerMode
</UL>

<P><STRONG><a name="[100]"></a>delay_ms</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_Callback
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHBTimerIsEnabled
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_INIT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnteredLowPowerMode
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetLEDIfPinVoltage
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_Erase
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyshellXmodemHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxStateMachine
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRXStateMachine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXDMACallback
</UL>

<P><STRONG><a name="[1f1]"></a>fetchloggerheader</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logger.o(i.fetchloggerheader))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fetchloggerheader &rArr; M24C512_PageRead &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C512_PageRead
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreErrorLogFromXmodem
</UL>

<P><STRONG><a name="[1f6]"></a>fmaxf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fmaxf.o(i.fmaxf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fmaxf &rArr; __ARM_fcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
</UL>

<P><STRONG><a name="[1f7]"></a>fminf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fminf.o(i.fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fminf &rArr; __ARM_fcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
</UL>

<P><STRONG><a name="[213]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1ef]"></a>getSideKeyClickAndHoldEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sidekey.o(i.getSideKeyClickAndHoldEvent))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
</UL>

<P><STRONG><a name="[1de]"></a>getSideKeyHoldEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sidekey.o(i.getSideKeyHoldEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[1df]"></a>getSideKeyLongPressEvent</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sidekey.o(i.getSideKeyLongPressEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
</UL>

<P><STRONG><a name="[1d0]"></a>getSideKeyShortPressCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sidekey.o(i.getSideKeyShortPressCount))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[46]"></a>imonadjArgument</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, imonadj.o(i.imonadjArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[109]"></a>log</STRONG> (Thumb, 790 bytes, Stack size 80 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
</UL>

<P><STRONG><a name="[48]"></a>logbkupArgument</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, logbkup.o(i.logbkupArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>logbkupCmdEndHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, logbkup.o(i.logbkupCmdEndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = logbkupCmdEndHandler &rArr; XmodemTransferReset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logbkup.o(i.logbkupHandler)
</UL>
<P><STRONG><a name="[153]"></a>logbkupHandler</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, logbkup.o(i.logbkupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = logbkupHandler &rArr; XmodemRxDisplayHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitTxModule
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitRXModule
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXmodemBackUp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[150]"></a>logclrHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, logclr.o(i.logclrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = logclrHandler &rArr; ReInitLogArea &rArr; M24C512_PageWrite &rArr; IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLoggerHeader_AutoUpdateTIM
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitLogArea
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[3e]"></a>login_ctrlC_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loginlogout.o(i.login_ctrlC_handler))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>logviewArgument</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logview.o(i.logviewArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>logviewhandler</STRONG> (Thumb, 1946 bytes, Stack size 136 bytes, logview.o(i.logviewhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = logviewhandler &rArr; DisaplayTelemResult &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateLogEntryCRC32
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchLoggerData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisaplayTelemResult
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[92]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = main &rArr; ShellProcUtilHandler &rArr; CommandHandler &rArr; HelpHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKey_LogicHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideKeyInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellProcUtilHandler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBUS_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLogModule_POR
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateStateMachine
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PStateInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORConfHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowVoltageIndicate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_POR
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoggerHeader_AutoUpdateHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShortCounter
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDMgmt_CallBack
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalADC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_POR
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHBTimer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverLockPOR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleReconfigure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHBTimerIsEnabled
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4a]"></a>modeadvcfgArgument</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, modeadvcfg.o(i.modeadvcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>modeadvcfgHandler</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, modeadvcfg.o(i.modeadvcfgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = modeadvcfgHandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectMode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputIsTrue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForLightmode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[4b]"></a>modecurcfgArgument</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, modecurcfg.o(i.modecurcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>modecurcfghandler</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, modecurcfg.o(i.modecurcfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = modecurcfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[49]"></a>modeenacfgArgument</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, modeenacfg.o(i.modeenacfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>modeporcfgArgument</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, modeporcfg.o(i.modeporcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>modeporcfghandler</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, modeporcfg.o(i.modeporcfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = modeporcfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputIsTrue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[53]"></a>modeviewArgument</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modeview.o(i.modeviewArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>modeviewhandler</STRONG> (Thumb, 1864 bytes, Stack size 24 bytes, modeview.o(i.modeviewhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = modeviewhandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[4d]"></a>mostranscfgArgument</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mostrancfg.o(i.mostranscfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>mostranscfghandler</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, mostrancfg.o(i.mostranscfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mostranscfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStringCanBeSentViaMorse
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[11e]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_2NPowCalc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
</UL>

<P><STRONG><a name="[45]"></a>reboot_CtrlC_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, reboot.o(i.reboot_CtrlC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reboot_CtrlC_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>reboot_TIM_Callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, reboot.o(i.reboot_TIM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>runlogcfgHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, runlogcfg.o(i.runlogcfgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = runlogcfgHandler &rArr; runlogclrAndrunloggerEnCtrl &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTxDisplayHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemRxDisplayHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitTxModule
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemInitRXModule
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXmodemBackUp
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogclrAndrunloggerEnCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[220]"></a>runlogclrAndrunloggerEnCtrl</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, runlogcfg.o(i.runlogclrAndrunloggerEnCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = runlogclrAndrunloggerEnCtrl &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRunTimeLogArea
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XmodemTransferReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputIsTrue
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogcfgHandler
</UL>

<P><STRONG><a name="[151]"></a>runlogviewHandler</STRONG> (Thumb, 1700 bytes, Stack size 16 bytes, runlogview.o(i.runlogviewHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = runlogviewHandler &rArr; DisplayLampTime &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRunLogCRC32
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLampTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[21f]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4c]"></a>strobecfgArgument</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, strobecfg.o(i.strobecfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>strobecfghandler</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, strobecfg.o(i.strobecfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = strobecfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelectedModeConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayWhichModeSelected
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectModeGroup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForModeGroup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[44]"></a>termcfgArgument</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, termcfg.o(i.termcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>termcfgHandler</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, termcfg.o(i.termcfgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = termcfgHandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[15a]"></a>thermalcfghandler</STRONG> (Thumb, 898 bytes, Stack size 64 bytes, thermalcfg.o(i.thermalcfghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = thermalcfghandler &rArr; DisplayIllegalParam &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLinearTable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfParamOnlyDigit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIllegalParam
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempTable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCorrectSensor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUserInputForThermalSens
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[4f]"></a>thremalcfgArgument</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, thermalcfg.o(i.thremalcfgArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>usrmodArgument</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usrmod.o(i.usrmodArgument))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>usrmod_ctrlC_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usrmod.o(i.usrmod_ctrlC_handler))
<BR>[Address Reference Count : 1]<UL><LI> commandhandler.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>usrmodhandler</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, usrmod.o(i.usrmodhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = usrmodhandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintCommandNoParam
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsParameterExist
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[15f]"></a>ustrlen</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, commandprocutil.o(i.ustrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ustrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryUpward
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHistoryDownward
</UL>

<P><STRONG><a name="[149]"></a>verHandler</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, ver.o(i.verHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = verHandler &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_EncryptDecryptData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandHandler
</UL>

<P><STRONG><a name="[8c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[31]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[222]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLampTime
</UL>

<P><STRONG><a name="[223]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[224]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearDIM_POR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
</UL>

<P><STRONG><a name="[225]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLinearTable
</UL>

<P><STRONG><a name="[227]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLinearTable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
</UL>

<P><STRONG><a name="[228]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeDataLogging
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA219_GetBusInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResult
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDuty
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runlogviewHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeadvcfgHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomFlashHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
</UL>

<P><STRONG><a name="[270]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLinearTable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectLoginfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightONLogic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modecurcfghandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battcfghandler
</UL>

<P><STRONG><a name="[229]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
</UL>

<P><STRONG><a name="[22a]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueLinearTable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeBatteryTelemetry
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeModeCurrentHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampModeHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreatheStateMachine
</UL>

<P><STRONG><a name="[22c]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[69]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[cd]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[e9]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[e8]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>DisplayConfError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cfgmgmt.o(i.DisplayConfError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplayConfError &rArr; UARTPuts &rArr; TXDMA_StartFirstTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgmgmthandler
</UL>

<P><STRONG><a name="[177]"></a>DisaplayTelemResult</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, logview.o(i.DisaplayTelemResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = DisaplayTelemResult &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logviewhandler
</UL>

<P><STRONG><a name="[183]"></a>DisplayTempTable</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, thermalcfg.o(i.DisplayTempTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DisplayTempTable &rArr; UartPrintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPrintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermalcfghandler
</UL>

<P><STRONG><a name="[1d5]"></a>EnteredTripleClick</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, modeswitchlogic.o(i.EnteredTripleClick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnteredTripleClick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSwitchLogicHandler
</UL>

<P><STRONG><a name="[12c]"></a>GetMorseSequenceFromASCII</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, morsecodetransmitmode.o(i.GetMorseSequenceFromASCII))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStringCanBeSentViaMorse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseSenderStateMachine
</UL>

<P><STRONG><a name="[ad]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ac]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[22b]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[226]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[d6]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e4]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[ec]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ee]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ef]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6d]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[de]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[e0]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
